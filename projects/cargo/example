import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
class jargo{
    public static void main(String[] args)throws IOException{  
        String mode = args[0];
        String projectString = args[1];
        switch (mode) {
            case "new":
                newProject(projectString);
                System.out.println("added new project, " + projectString);
            case "rm":
                rmProject(projectString);
                System.out.println("removed project, " + projectString);
            default:
                break;
        }   
    }
    //modes
    static void newProject(String projectName) throws IOException{
        String[] structure;
        String defaultFile, destFile;
        structure = new String[4];
        structure[0] = projectName;
        structure[1] = projectName + "/src";
        structure[2] = projectName + "/out";
        structure[3] = projectName + "/information";
        for (int i = 0; i < structure.length; i++){
            mkdir(structure[i]);
        }
        defaultFile = "defaults/main.java";
        destFile = structure[1] + "/main.java";
        cp(defaultFile, destFile);
    }

    static void rmProject(String projectName){
        File file = new File(projectName);
        deleteFolder(file);
    }

    //components
    static void mkdir(String dirName){
        File newDir = new File(dirName);
        if(!newDir.exists()){
            newDir.mkdir();
        }else{
            System.out.println("Cannot make new project.");
        }
    }
    static void cp(String source, String destination) throws IOException{
        FileInputStream inStream;
        FileOutputStream outStream;
        try{
            inStream = new FileInputStream(source);
            outStream = new FileOutputStream(destination);
            byte[] buffer = new byte[1024];
            int length;
            while((length = inStream.read(buffer)) > 0){
                outStream.write(buffer, 0, length);
            }
        }catch(IOException e){
            e.printStackTrace();
        }
    }
    static void deleteFolder(File filename){
        for(File subFile : filename.listFiles()){
            if(subFile.isDirectory()){
                deleteFolder(subFile);
            }else{
                subFile.delete();
            }
        }
        filename.delete();
    }
}
